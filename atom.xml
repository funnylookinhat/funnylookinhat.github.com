<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[FunnyLookinHat / David Overcash]]></title>
  <link href="http://funnylookinhat.github.com/atom.xml" rel="self"/>
  <link href="http://funnylookinhat.github.com/"/>
  <updated>2014-04-04T10:28:21-06:00</updated>
  <id>http://funnylookinhat.github.com/</id>
  <author>
    <name><![CDATA[David Overcash]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The Galago UltraPro - Ultimate Dev Machine]]></title>
    <link href="http://funnylookinhat.github.com/blog/2014/04/04/the-galago-ultrapro-ultimate-dev-machine/"/>
    <updated>2014-04-04T08:25:46-06:00</updated>
    <id>http://funnylookinhat.github.com/blog/2014/04/04/the-galago-ultrapro-ultimate-dev-machine</id>
    <content type="html"><![CDATA[<h3>( or &ndash; kicking it and taking names with the Galago )</h3>

<p>One of the benefits of working at <a href="https://www.system76.com">System76</a> is being able to work on a wide variety of hardware.  You tend to get a really good feel for what works and what doesn&rsquo;t with myriad of form factors and details.  For the last two and a half years, I primarily worked on an old model of the <a href="https://www.system76.com/laptops/model/gazelle">Gazelle Pro</a> (gazp6).  It was one of the last 15.6&#8221; models sold with a dedicated graphics card, and given that I am doing lots of WebGL development in my spare time, I wanted as many GPU cycles as possible so that I could develop around the hardware curve.</p>

<p><img class="center" src="http://funnylookinhat.github.com/images/posts/galago-back.jpg" width="500"></p>

<h2>Paying Homage</h2>

<p>First, a couple of thoughts on the Gazelle.  While I&rsquo;m generally not a fan of 15.6&#8221; laptops ( they&rsquo;re simply too large for my personal taste ), this was one that I could appreciate.  The chiclet keyboard had fantastic travel.  The screen was bright and crisp, and the resolution was 1920x1080 &ndash; a detail that was hard to find in laptops at the time.  The dedicated nVidia graphics are still competitive ( 460GTX ) even today for laptops.  There wasn&rsquo;t a Steam game I couldn&rsquo;t play nor a WebGL demo I couldn&rsquo;t run simulataneously on 6 different windows, all the while seamlessly virtualizing OpenStack in a VirtualBox VM in the background.  It is an amazing laptop.</p>

<p>However, I recently bumped my development machine up to a <a href="https://www.system76.com/laptops/model/galago">Galago UltraPro</a>.  I had been holding out for a Broadwell system ( i.e. one more year ) &ndash; thinking that it would finally manage to have the graphics capable of my projects and hobbies ( <em>cough</em> <strong>DOTA2</strong> <em>cough</em> ).  On a whim I was running some WebGL tests on the Galago using the 3.13 kernel with Mesa 10, and was suprised to find the Galago out-perform the dedicated graphics card of the Gazelle.  The decision at that point was pretty straightforward: go with the Galago.</p>

<p>I would maintain that &ndash; for the price &ndash; the Galago is the most unique offering currently on the market for laptops ( even more certainly if you consider the sub-market of Ubuntu laptops ).  This comes down to a few specific details &ndash; but the overwhelming three are the processor, graphics, and display.  Let&rsquo;s call this the triple-threat. I&rsquo;ve always wanted to call something that, never had the chance till now &ndash; bucket list: check.</p>

<p><img class="center" src="http://funnylookinhat.github.com/images/posts/workflow-small.jpg" width="600"></p>

<p style="text-align:center;"> <em>My workspace often looks something like this.  Notice the FPS on those demos?  boom! <a href="http://funnylookinhat.github.com/images/posts/workflow.jpg">Fullsize</a></em></p>

<h2>UltraPro > UltraBook</h2>

<p>For lack of a better comparison, the UltraPro really needs to be measured with regards to UltraBooks.  The primary function of an UltraBook is to be portable and still fairly powerful, with an added emphasis on battery life.  The UltraPro was designed with these same two primary principles in mind, except that the processor is FAR more powerful than the class usually affords.</p>

<p>Most UltraBooks are built on U class processors &ndash; meaning that they have only two cores and use lower wattages ( i.e. less powerful ).  By and large, most other hardware vendors would rank an i7-4500U within their most powerful processor class ( more than likely based on the max clock speed for turbo-boost and the fact that it has the i7 instruction sets ).  The Galago, however, includes an i7-4750HQ.  This is a completely different class of processor &ndash; meant for performance over battery life.  That isn&rsquo;t to say that battery life is bad on the Galago ( I get an easy three hours ), but I&rsquo;d rather kick it and take names for three hours rather than do everything at half speed for six.</p>

<p>You can get a complete breakdown of what the 4750 has to offer <a href="http://ark.intel.com/products/76087/Intel-Core-i7-4750HQ-Processor-6M-Cache-up-to-3_20-GHz">here</a> &ndash; but these are the features that really stick out to me:</p>

<table>
<thead>
<tr>
<th>Spec                  </th>
<th> i7-4500U                     </th>
<th> i7-4750HQ                      </th>
</tr>
</thead>
<tbody>
<tr>
<td># of Cores / Threads  </td>
<td> 2 / 4                        </td>
<td> 4 / 8                          </td>
</tr>
<tr>
<td>Cache                 </td>
<td> 4 MB                         </td>
<td> 6 MB                           </td>
</tr>
<tr>
<td>Max TDP               </td>
<td> 15 W                         </td>
<td> 47 W                           </td>
</tr>
<tr>
<td>Max Turbo Frequency   </td>
<td> 3.0 Ghz                      </td>
<td> 3.2 Ghz                        </td>
</tr>
<tr>
<td>Max Memory Bandwidth  </td>
<td> 25.6 GB/s                    </td>
<td> 76.8 GB/s                      </td>
</tr>
<tr>
<td>Processor Graphics    </td>
<td> Intel HD Graphics 4400       </td>
<td> Intel Iris Pro Graphics 5200   </td>
</tr>
</tbody>
</table>


<p>When I look at that comparison, I see apples and oranges.  I know that they&rsquo;re both &ldquo;i7&rdquo; chips, but they&rsquo;re ultimately two completely different classes of processor.  I&rsquo;ve used the i7-4500U around the office in testing and whatnot, it&rsquo;s a good processor &ndash; however, the best way to compare it to the 4750HQ is this: anything I can do with the 4500U, I can also do with the 4750HQ, <strong>while simultaneously running a 4-node virtualized Openstack environment.</strong>  That is to say, invaluable performance considering my development workflow.</p>

<h2>Bloody Eyes are Sad Eyes</h2>

<p>The other HUGE difference between the two processors is the graphics.  I know I already mentioned that this was the straw that broke the back of my old laptop &ndash; but I can&rsquo;t stress enough how impressive Iris Pro 5200 is.  It flies &ndash; kicking OpenGL calls to the side of the road like a monster truck racing past llamas on it&rsquo;s way up a mountain.</p>

<p>Those graphics wouldn&rsquo;t look nearly as good on any other screen, the Galago&rsquo;s 14.1&#8221; IPS matte dispay is absolutely beautiful.  I mean &ndash; unbelievably good.  Most displays that ship today are overly washed out in an attempt to make them look brighter.  Pfft.  Pathetic.  The Galago doesn&rsquo;t compromise a fleeting glance of brightness for spot-on saturation; instead, it ships with a custom color profile to make sure the screen most accurately fits sRGB.  <a href="http://funnylookinhat.github.com/images/posts/the-colors-duke.gif">THE COLORS DUKE. THE COLORS!</a></p>

<p>Nearly as important is the resolution &ndash; I think 1080p is just right on a 14.1&#8221; screen.  I can get plenty of lines of clear code in while not straining so much that my eyes start to bleed.  I don&rsquo;t know if you&rsquo;ve ever had bloody eyes, but I&rsquo;m here to assure you it&rsquo;s not pleasant and should generally be avoided.</p>

<p><img class="center" src="http://funnylookinhat.github.com/images/posts/hacker-screen.gif" width="500"></p>

<p style="text-align:center;"> <em>Are you |337 like this h4x0r? Then you need a Galago to fit all those terminals.</em></p>

<h2>Hacker-Typer: Initialize</h2>

<p>I&rsquo;m a big fan of centered laptop keyboards.  I was a Thinkpad owner before I came to System76 and know the value of having well placed Del / Home / PgUp / PgDown / End keys if you write a lot of code.  The layout of this keyboard <em>just works</em> for me.  When the Galago first came out &ndash; it had a bad keyboard that failed to catch keystrokes; however, we admitted it and ended up replacing every single one we shipped with a brand new, completely re-engineered keyboard.  The typing feedback on the new keyboard is day-and-night different from the original &ndash; keys have a definitive click as you type, and once you get into the groove you just glide over them like some stereotypical hacker in a hollywood movie.</p>

<p><img class="center" src="http://funnylookinhat.github.com/images/posts/galago-keyboard.jpg" width="500"></p>

<h2>Ubuntu-Powered</h2>

<p>It goes without saying, the Galago ships with Ubuntu Linux installed by default.  I&rsquo;m thoroughly convinced that Ubuntu is a far better platform to develop on than Windows or OS X.  My argument is far too thorough to shoe-horn in at this point; suffice it to say, I&rsquo;ve ( regrettably ) tried to make it work on both Windows and OS X in my past, and they both ultimately got in the way.  When I finally came running back to Linux like the prodigal son, I found it frustrating and difficult to get good hardware support out of the box on a variety of laptop hardware.  I ended up spending far too much time trying to configure some part of my system to work correctly &ndash; in reality I simply wanted a tool that worked.</p>

<p>Having an &ldquo;Ubuntu out of the box&rdquo; laptop solves that problem for me.  No config files.  No optimus hacks.  No kernel patches.  No firmware cutter.  Just pure &amp; powerful Ubuntu.  Upon receiving my laptop, I opened it up, and was getting down and dirty with my code within minutes.</p>

<p>As a quick side note &ndash; we take a bit of pride in the image that we preinstall on our computers.  We know that quite a few of our customers are developers, so we include a lot of commonly used tools by default to simply get you going faster.  Packages like curl, bazaar, git, and build-essential are all pre-installed.  We also do some common-sense tweaks to gedit, like changing the default tab size from 8 characters down to 4 &ndash; not that we expect you to write everything in gedit, but it sure doesn&rsquo;t hurt.</p>

<h2>QED</h2>

<p>The Galago UltraPro is the best development machine I&rsquo;ve ever written code on.  It&rsquo;s fast, light, and durable: it travels extremely well.  It feels completely comfortable to type on.  The clickpad is accurate and stays out of the way when you&rsquo;re typing.  The graphics are fast enough to frag on.  I can run plenty of virtual machines while simultaneously working &ndash; nothing skips a beat.  The screen is top-notch, with plenty of pixels for my code.  When push comes to shove, it gets me working faster, and without getting in my way.  <strong>I dare you to find me a better devtop.</strong></p>

<p>You can find all of the goods on the <a href="https://www.system76.com/laptops/model/galago">Galago UltraPro at System76&rsquo;s website</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Gotta Start Somewhere]]></title>
    <link href="http://funnylookinhat.github.com/blog/2014/02/17/gotta-start-somewhere/"/>
    <updated>2014-02-17T05:36:37-07:00</updated>
    <id>http://funnylookinhat.github.com/blog/2014/02/17/gotta-start-somewhere</id>
    <content type="html"><![CDATA[<h2>Making Ideas Reality: Part 1</h2>

<p>I&rsquo;ve had an idea for the past few years to build something that could be quite innovative and impressive for the Internet; its focus is to create collaborative virtual world experiences that are distributed and different across a wide array of servers.  I don&rsquo;t want to dig into the details of it too far on this post &ndash; it would be too much to write this morning &ndash; but suffice it to say, it&rsquo;s the absolute best idea I have right now and I&rsquo;m working to prototype it as quickly as I can.</p>

<p>That being said &ndash; the first step in prototyping virtual worlds and creating unique 3D experiences with WebGL is <strong>obviously</strong> to learn a ton of WebGL; this was not so obvious to me at the beginning.  I had been waffling for a long time &ndash; whiteboarding in my spare time, using up dozens of legal pads and pencils, staring off into space at the gym simply thinking about all of the myriad problems to solve.  I think the best way to describe what I&rsquo;m good at is architecting elegant systems to solve complex problems, but for me to be able to do that well, I often focus on loading the entire system into my brain over and over again until I&rsquo;ve created a solution for every single use-case and connection within the system.  Ultimately, I often won&rsquo;t move forward on a project until I can hold the entire system in a mish-mash of whiteboards, legal pads, and synapses and see it working.</p>

<p>This was essentially leaving me at a stalemate with progress on my project &ndash; and I realized that I needed to simply stop worrying about a lot of the details down the road and focus on building the blocks that I knew would be useful no matter what the final system looked like.  So I began to think about what would be necessary and focused on just one piece: WebGL.</p>

<p>I made a goal for myself &ndash; figure out how to create a small environment with trees and shrubs and whatnot, and use it as a simple benchmark for browser performance.  <strong>Small, simple, goal.</strong></p>

<p>I dug into <a href="http://threejs.org/">three.js</a> and started learning everything I could about models and the limits of browser renderering.  I learned how to use Blender ( albeit, at the most basic level ) so that I could manage different model resources.  I asked a million questions on IRC and scraped every ounce of wisdom I could from tutorials and demos I found across the web.  After two weekends and shoe-horning effort into every spare minute I had, I was able to produce a simple demo.</p>

<p><img class="center" src="http://funnylookinhat.github.com/images/posts/world-demo-preview.jpg"></p>

<p>If you&rsquo;ve got a good browser ( Chrome, Firefox, etc. ) you can check it out here: <a href="http://funnylookinhat.com/world-demo/">http://funnylookinhat.com/world-demo/</a>.  That&rsquo;s hosted on Github &ndash; a service which doesn&rsquo;t seem to love the idea of hosting large amounts of binary data on its pages service &ndash; so you might have to be a bit patient with the loading experience.</p>

<p>This post is ultimately one in a series about progress, so forgive me for what must be an anti-climatic ending.  At the end of those two grueling weeks I had this demo to show for myself &ndash; which wasn&rsquo;t half bad &ndash; but ultimately was a far cry where I wanted to be.  That didn&rsquo;t matter though &ndash; as I had at least gotten something done and could point to it.  I had come from knowing absolutely nothing about WebGL ( or GL at all, for that matter ) to being able to string together this&hellip; thing.  But progress is good, it got me started, and now I&rsquo;m much further along than I was then.</p>

<p>Next time we&rsquo;ll talk about seizing inspiration; should be a fun time.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Catch Up 1: The Colors Duke]]></title>
    <link href="http://funnylookinhat.github.com/blog/2014/02/14/catch-up-1-the-colors-duke/"/>
    <updated>2014-02-14T05:40:00-07:00</updated>
    <id>http://funnylookinhat.github.com/blog/2014/02/14/catch-up-1-the-colors-duke</id>
    <content type="html"><![CDATA[<p>Whenever I&rsquo;m trying to come up with a quick theme for a site that I&rsquo;m building ( a one page or something of that sort ), I usually head over to <a href="http://colorschemedesigner.com/">colorschemedesigner.com</a> and just start randomly throwing in something of the blue or green variety.</p>

<p>In particular, I&rsquo;ve been digging <a href="http://colorschemedesigner.com/#2P41Tllo0w0w0http://colorschemedesigner.com/#2P41Tllo0w0w0">this colorset</a> quite a bit lately.  Our house has lots of bold natural colors, and from my place in the shame-corner of the web design world, I&rsquo;d venture to guess that bold naturals are coming back &ndash; ergo, we are trendy.</p>

<p><img class="center" src="http://funnylookinhat.github.com/images/posts/natural_colors.png"></p>

<p>Take special note of what I just said there: <em>I&rsquo;d venture to guess</em> that bold naturals are coming back.  <strong>Emphasis added.</strong>  Because that&rsquo;s what you should notice.</p>

<p>There&rsquo;s a reason we ( coders ) should preclude even our most grandiose thoughts on design with &ldquo;venture to guess&rdquo;: we had our chance and we blew it.  Need I remind you what the Internet looked like when programmers and <em>l337 h4ckers</em> had their way with things?</p>

<p><img class="center" src="http://funnylookinhat.github.com/images/posts/ugly_website.png"></p>

<p>Three important things to note:</p>

<ol>
<li>We all did this &ndash; not one of us isn&rsquo;t guilty.</li>
<li>Shortly after clicking &ldquo;OK&rdquo; on that alert I managed to steal his code and totally hack his website.  He has yet to counter-hack me.</li>
<li>If you ever need an example of a bad website from the GeoCities / Angelfire days, just google &ldquo;diablo guild [cool mythological word] [even better word]&rdquo;.  For example &ldquo;diablo guild angels fury&rdquo; or &ldquo;diablo guild shadows night&rdquo;.  It goes without saying that I had two Diablo guilds back in the hey-day: Angels of Fury and Shadows of the Night.  We pwned.</li>
</ol>


<p>My point is this &ndash; the Internet was the most visually unappealing mish-mash of colors until the designers of the world rolled up their sleeves, learned what UX was, and started telling us what to do.  Designers have taught me to use one bold color, one accent color, and have my content be fairly monochromatic.</p>

<p>So &ndash; rather than use every single ( albeit amazing ) color in that natural color theme above &ndash; I&rsquo;ve implemented it on this site by pulling in just two colors ( background and header sub-title ).  It&rsquo;s taken a while, but I think I can finally trust myself with a very basic site design.</p>

<p>The most important thing I&rsquo;ve learned in the last 5 or 6 years of web work is how to work well with designers.  It takes time!  You need to be able to collaborate, offer clear UX suggestions, try to run with their ideas when appropriate, and continually remind yourself of what the Internet was when you had your reign.</p>

<p>Designers. I, for one, am grateful for our new color overlords.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lost _posts Again]]></title>
    <link href="http://funnylookinhat.github.com/blog/2014/02/13/lost-posts-again/"/>
    <updated>2014-02-13T08:51:00-07:00</updated>
    <id>http://funnylookinhat.github.com/blog/2014/02/13/lost-posts-again</id>
    <content type="html"><![CDATA[<p>I lost my _posts folder again.  I really need to stop forgetting this crucial step after updating.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git add .
</span><span class='line'>git commit -m 'your message'
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>For good measure I&rsquo;ve just added the following as a bash script named &ldquo;UPDATEBLOG&rdquo; because I&rsquo;m clearly hopeless.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/bash
</span><span class='line'>
</span><span class='line'>DATETIME=`date +"%Y-%m-%d_%T"`
</span><span class='line'>
</span><span class='line'>rake generate
</span><span class='line'>rake deploy
</span><span class='line'>
</span><span class='line'>git add .
</span><span class='line'>git commit -m "Automated blog backup: $COMMIT"
</span><span class='line'>git push origin source</span></code></pre></td></tr></table></div></figure>


<p>Catch up post incoming&hellip;</p>
]]></content>
  </entry>
  
</feed>
